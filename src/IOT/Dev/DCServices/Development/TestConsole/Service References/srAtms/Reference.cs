//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsole.srAtms {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/dcweb.Models")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Addressk__BackingFieldField;
        
        private decimal BTCk__BackingFieldField;
        
        private string PrivateKeyk__BackingFieldField;
        
        private string Txnk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Address>k__BackingField", IsRequired=true)]
        public string Addressk__BackingField {
            get {
                return this.Addressk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Addressk__BackingFieldField, value) != true)) {
                    this.Addressk__BackingFieldField = value;
                    this.RaisePropertyChanged("Addressk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<BTC>k__BackingField", IsRequired=true)]
        public decimal BTCk__BackingField {
            get {
                return this.BTCk__BackingFieldField;
            }
            set {
                if ((this.BTCk__BackingFieldField.Equals(value) != true)) {
                    this.BTCk__BackingFieldField = value;
                    this.RaisePropertyChanged("BTCk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PrivateKey>k__BackingField", IsRequired=true)]
        public string PrivateKeyk__BackingField {
            get {
                return this.PrivateKeyk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateKeyk__BackingFieldField, value) != true)) {
                    this.PrivateKeyk__BackingFieldField = value;
                    this.RaisePropertyChanged("PrivateKeyk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Txn>k__BackingField", IsRequired=true)]
        public string Txnk__BackingField {
            get {
                return this.Txnk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Txnk__BackingFieldField, value) != true)) {
                    this.Txnk__BackingFieldField = value;
                    this.RaisePropertyChanged("Txnk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="srAtms.IAtm")]
    public interface IAtm {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/CreateOrder", ReplyAction="http://tempuri.org/IAtm/CreateOrderResponse")]
        TestConsole.srAtms.Order CreateOrder(double btc, bool verfied);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/CreateOrder", ReplyAction="http://tempuri.org/IAtm/CreateOrderResponse")]
        System.Threading.Tasks.Task<TestConsole.srAtms.Order> CreateOrderAsync(double btc, bool verfied);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/SendBitcoins", ReplyAction="http://tempuri.org/IAtm/SendBitcoinsResponse")]
        string SendBitcoins(double btc, string bitcoinAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/SendBitcoins", ReplyAction="http://tempuri.org/IAtm/SendBitcoinsResponse")]
        System.Threading.Tasks.Task<string> SendBitcoinsAsync(double btc, string bitcoinAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/GetBitcoinAmount", ReplyAction="http://tempuri.org/IAtm/GetBitcoinAmountResponse")]
        double GetBitcoinAmount(double value, string currenceyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/GetBitcoinAmount", ReplyAction="http://tempuri.org/IAtm/GetBitcoinAmountResponse")]
        System.Threading.Tasks.Task<double> GetBitcoinAmountAsync(double value, string currenceyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/GetBalance", ReplyAction="http://tempuri.org/IAtm/GetBalanceResponse")]
        double GetBalance(string address, short confirmations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAtm/GetBalance", ReplyAction="http://tempuri.org/IAtm/GetBalanceResponse")]
        System.Threading.Tasks.Task<double> GetBalanceAsync(string address, short confirmations);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAtmChannel : TestConsole.srAtms.IAtm, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AtmClient : System.ServiceModel.ClientBase<TestConsole.srAtms.IAtm>, TestConsole.srAtms.IAtm {
        
        public AtmClient() {
        }
        
        public AtmClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AtmClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AtmClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AtmClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestConsole.srAtms.Order CreateOrder(double btc, bool verfied) {
            return base.Channel.CreateOrder(btc, verfied);
        }
        
        public System.Threading.Tasks.Task<TestConsole.srAtms.Order> CreateOrderAsync(double btc, bool verfied) {
            return base.Channel.CreateOrderAsync(btc, verfied);
        }
        
        public string SendBitcoins(double btc, string bitcoinAddress) {
            return base.Channel.SendBitcoins(btc, bitcoinAddress);
        }
        
        public System.Threading.Tasks.Task<string> SendBitcoinsAsync(double btc, string bitcoinAddress) {
            return base.Channel.SendBitcoinsAsync(btc, bitcoinAddress);
        }
        
        public double GetBitcoinAmount(double value, string currenceyCode) {
            return base.Channel.GetBitcoinAmount(value, currenceyCode);
        }
        
        public System.Threading.Tasks.Task<double> GetBitcoinAmountAsync(double value, string currenceyCode) {
            return base.Channel.GetBitcoinAmountAsync(value, currenceyCode);
        }
        
        public double GetBalance(string address, short confirmations) {
            return base.Channel.GetBalance(address, confirmations);
        }
        
        public System.Threading.Tasks.Task<double> GetBalanceAsync(string address, short confirmations) {
            return base.Channel.GetBalanceAsync(address, confirmations);
        }
    }
}
