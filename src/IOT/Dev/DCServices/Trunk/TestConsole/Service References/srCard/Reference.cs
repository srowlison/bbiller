//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsole.srCard {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://payment.diamondcircle.net/v1", ConfigurationName="srCard.ICard")]
    public interface ICard {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="http://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        bool AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="http://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        System.Threading.Tasks.Task<bool> AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="http://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        bool AddCard(string CardId, string PublicKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="http://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        System.Threading.Tasks.Task<bool> AddCardAsync(string CardId, string PublicKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/isCardOnFile", ReplyAction="http://payment.diamondcircle.net/v1/ICard/isCardOnFileResponse")]
        bool isCardOnFile(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/isCardOnFile", ReplyAction="http://payment.diamondcircle.net/v1/ICard/isCardOnFileResponse")]
        System.Threading.Tasks.Task<bool> isCardOnFileAsync(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/GetMargin", ReplyAction="http://payment.diamondcircle.net/v1/ICard/GetMarginResponse")]
        TestConsole.srCard.GetMarginResponse GetMargin(TestConsole.srCard.GetMarginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/GetMargin", ReplyAction="http://payment.diamondcircle.net/v1/ICard/GetMarginResponse")]
        System.Threading.Tasks.Task<TestConsole.srCard.GetMarginResponse> GetMarginAsync(TestConsole.srCard.GetMarginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="http://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        TestConsole.srCard.GetHotWalletAddressResponse GetHotWalletAddress(TestConsole.srCard.GetHotWalletAddressRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="http://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        System.Threading.Tasks.Task<TestConsole.srCard.GetHotWalletAddressResponse> GetHotWalletAddressAsync(TestConsole.srCard.GetHotWalletAddressRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/CreateOnlineAccount", ReplyAction="http://payment.diamondcircle.net/v1/ICard/CreateOnlineAccountResponse")]
        TestConsole.srCard.CreateOnlineAccountResponse CreateOnlineAccount(TestConsole.srCard.CreateOnlineAccountRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/ICard/CreateOnlineAccount", ReplyAction="http://payment.diamondcircle.net/v1/ICard/CreateOnlineAccountResponse")]
        System.Threading.Tasks.Task<TestConsole.srCard.CreateOnlineAccountResponse> CreateOnlineAccountAsync(TestConsole.srCard.CreateOnlineAccountRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMargin", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class GetMarginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public string TerminalId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public string Currency;
        
        public GetMarginRequest() {
        }
        
        public GetMarginRequest(string TerminalId, string Currency) {
            this.TerminalId = TerminalId;
            this.Currency = Currency;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMarginResponse", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class GetMarginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public bool GetMarginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public decimal BuyMargin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=2)]
        public decimal SellMargin;
        
        public GetMarginResponse() {
        }
        
        public GetMarginResponse(bool GetMarginResult, decimal BuyMargin, decimal SellMargin) {
            this.GetMarginResult = GetMarginResult;
            this.BuyMargin = BuyMargin;
            this.SellMargin = SellMargin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHotWalletAddress", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class GetHotWalletAddressRequest {
        
        public GetHotWalletAddressRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHotWalletAddressResponse", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class GetHotWalletAddressResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public bool GetHotWalletAddressResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public string Address;
        
        public GetHotWalletAddressResponse() {
        }
        
        public GetHotWalletAddressResponse(bool GetHotWalletAddressResult, string Address) {
            this.GetHotWalletAddressResult = GetHotWalletAddressResult;
            this.Address = Address;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateOnlineAccount", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class CreateOnlineAccountRequest {
        
        public CreateOnlineAccountRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateOnlineAccountResponse", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class CreateOnlineAccountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public bool CreateOnlineAccountResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public string Username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=2)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=3)]
        public string ConfirmToken;
        
        public CreateOnlineAccountResponse() {
        }
        
        public CreateOnlineAccountResponse(bool CreateOnlineAccountResult, string Username, string Password, string ConfirmToken) {
            this.CreateOnlineAccountResult = CreateOnlineAccountResult;
            this.Username = Username;
            this.Password = Password;
            this.ConfirmToken = ConfirmToken;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardChannel : TestConsole.srCard.ICard, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardClient : System.ServiceModel.ClientBase<TestConsole.srCard.ICard>, TestConsole.srCard.ICard {
        
        public CardClient() {
        }
        
        public CardClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN) {
            return base.Channel.AddCardWithPIN(CardId, PublicKey, Password, PIN);
        }
        
        public System.Threading.Tasks.Task<bool> AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN) {
            return base.Channel.AddCardWithPINAsync(CardId, PublicKey, Password, PIN);
        }
        
        public bool AddCard(string CardId, string PublicKey, string Password) {
            return base.Channel.AddCard(CardId, PublicKey, Password);
        }
        
        public System.Threading.Tasks.Task<bool> AddCardAsync(string CardId, string PublicKey, string Password) {
            return base.Channel.AddCardAsync(CardId, PublicKey, Password);
        }
        
        public bool isCardOnFile(string CardId) {
            return base.Channel.isCardOnFile(CardId);
        }
        
        public System.Threading.Tasks.Task<bool> isCardOnFileAsync(string CardId) {
            return base.Channel.isCardOnFileAsync(CardId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.srCard.GetMarginResponse TestConsole.srCard.ICard.GetMargin(TestConsole.srCard.GetMarginRequest request) {
            return base.Channel.GetMargin(request);
        }
        
        public bool GetMargin(string TerminalId, string Currency, out decimal BuyMargin, out decimal SellMargin) {
            TestConsole.srCard.GetMarginRequest inValue = new TestConsole.srCard.GetMarginRequest();
            inValue.TerminalId = TerminalId;
            inValue.Currency = Currency;
            TestConsole.srCard.GetMarginResponse retVal = ((TestConsole.srCard.ICard)(this)).GetMargin(inValue);
            BuyMargin = retVal.BuyMargin;
            SellMargin = retVal.SellMargin;
            return retVal.GetMarginResult;
        }
        
        public System.Threading.Tasks.Task<TestConsole.srCard.GetMarginResponse> GetMarginAsync(TestConsole.srCard.GetMarginRequest request) {
            return base.Channel.GetMarginAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.srCard.GetHotWalletAddressResponse TestConsole.srCard.ICard.GetHotWalletAddress(TestConsole.srCard.GetHotWalletAddressRequest request) {
            return base.Channel.GetHotWalletAddress(request);
        }
        
        public bool GetHotWalletAddress(out string Address) {
            TestConsole.srCard.GetHotWalletAddressRequest inValue = new TestConsole.srCard.GetHotWalletAddressRequest();
            TestConsole.srCard.GetHotWalletAddressResponse retVal = ((TestConsole.srCard.ICard)(this)).GetHotWalletAddress(inValue);
            Address = retVal.Address;
            return retVal.GetHotWalletAddressResult;
        }
        
        public System.Threading.Tasks.Task<TestConsole.srCard.GetHotWalletAddressResponse> GetHotWalletAddressAsync(TestConsole.srCard.GetHotWalletAddressRequest request) {
            return base.Channel.GetHotWalletAddressAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.srCard.CreateOnlineAccountResponse TestConsole.srCard.ICard.CreateOnlineAccount(TestConsole.srCard.CreateOnlineAccountRequest request) {
            return base.Channel.CreateOnlineAccount(request);
        }
        
        public bool CreateOnlineAccount(out string Username, out string Password, out string ConfirmToken) {
            TestConsole.srCard.CreateOnlineAccountRequest inValue = new TestConsole.srCard.CreateOnlineAccountRequest();
            TestConsole.srCard.CreateOnlineAccountResponse retVal = ((TestConsole.srCard.ICard)(this)).CreateOnlineAccount(inValue);
            Username = retVal.Username;
            Password = retVal.Password;
            ConfirmToken = retVal.ConfirmToken;
            return retVal.CreateOnlineAccountResult;
        }
        
        public System.Threading.Tasks.Task<TestConsole.srCard.CreateOnlineAccountResponse> CreateOnlineAccountAsync(TestConsole.srCard.CreateOnlineAccountRequest request) {
            return base.Channel.CreateOnlineAccountAsync(request);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://payment.diamondcircle.net/v1", ConfigurationName="srCard.IPayment")]
    public interface IPayment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/IPayment/WriteTransaction", ReplyAction="http://payment.diamondcircle.net/v1/IPayment/WriteTransactionResponse")]
        TestConsole.srCard.WriteTransactionResponse WriteTransaction(TestConsole.srCard.WriteTransactionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/IPayment/WriteTransaction", ReplyAction="http://payment.diamondcircle.net/v1/IPayment/WriteTransactionResponse")]
        System.Threading.Tasks.Task<TestConsole.srCard.WriteTransactionResponse> WriteTransactionAsync(TestConsole.srCard.WriteTransactionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/IPayment/CreateaPayment", ReplyAction="http://payment.diamondcircle.net/v1/IPayment/CreateaPaymentResponse")]
        bool CreateaPayment(string PaymentProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://payment.diamondcircle.net/v1/IPayment/CreateaPayment", ReplyAction="http://payment.diamondcircle.net/v1/IPayment/CreateaPaymentResponse")]
        System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteTransaction", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class WriteTransactionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public string CardId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public string TransType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=2)]
        public string TerminalId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=3)]
        public string NumuratorCurrency;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=4)]
        public string DenominatorCurrency;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=5)]
        public decimal Amount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=6)]
        public decimal Price;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=7)]
        public string Reference;
        
        public WriteTransactionRequest() {
        }
        
        public WriteTransactionRequest(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference) {
            this.CardId = CardId;
            this.TransType = TransType;
            this.TerminalId = TerminalId;
            this.NumuratorCurrency = NumuratorCurrency;
            this.DenominatorCurrency = DenominatorCurrency;
            this.Amount = Amount;
            this.Price = Price;
            this.Reference = Reference;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteTransactionResponse", WrapperNamespace="http://payment.diamondcircle.net/v1", IsWrapped=true)]
    public partial class WriteTransactionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=0)]
        public bool WriteTransactionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://payment.diamondcircle.net/v1", Order=1)]
        public int TransactionID;
        
        public WriteTransactionResponse() {
        }
        
        public WriteTransactionResponse(bool WriteTransactionResult, int TransactionID) {
            this.WriteTransactionResult = WriteTransactionResult;
            this.TransactionID = TransactionID;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaymentChannel : TestConsole.srCard.IPayment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaymentClient : System.ServiceModel.ClientBase<TestConsole.srCard.IPayment>, TestConsole.srCard.IPayment {
        
        public PaymentClient() {
        }
        
        public PaymentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaymentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.srCard.WriteTransactionResponse TestConsole.srCard.IPayment.WriteTransaction(TestConsole.srCard.WriteTransactionRequest request) {
            return base.Channel.WriteTransaction(request);
        }
        
        public bool WriteTransaction(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, out int TransactionID) {
            TestConsole.srCard.WriteTransactionRequest inValue = new TestConsole.srCard.WriteTransactionRequest();
            inValue.CardId = CardId;
            inValue.TransType = TransType;
            inValue.TerminalId = TerminalId;
            inValue.NumuratorCurrency = NumuratorCurrency;
            inValue.DenominatorCurrency = DenominatorCurrency;
            inValue.Amount = Amount;
            inValue.Price = Price;
            inValue.Reference = Reference;
            TestConsole.srCard.WriteTransactionResponse retVal = ((TestConsole.srCard.IPayment)(this)).WriteTransaction(inValue);
            TransactionID = retVal.TransactionID;
            return retVal.WriteTransactionResult;
        }
        
        public System.Threading.Tasks.Task<TestConsole.srCard.WriteTransactionResponse> WriteTransactionAsync(TestConsole.srCard.WriteTransactionRequest request) {
            return base.Channel.WriteTransactionAsync(request);
        }
        
        public bool CreateaPayment(string PaymentProvider) {
            return base.Channel.CreateaPayment(PaymentProvider);
        }
        
        public System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider) {
            return base.Channel.CreateaPaymentAsync(PaymentProvider);
        }
    }
}
