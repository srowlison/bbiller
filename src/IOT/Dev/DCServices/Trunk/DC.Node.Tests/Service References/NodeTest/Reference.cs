//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dcweb.Tests.NodeTest {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schema.diamondcircle.net/v1", ConfigurationName="NodeTest.IAtm")]
    public interface IAtm {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/CreatePublicEncryptedPrivateKey", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/CreatePublicEncryptedPrivateKeyResponse")]
        DC.Common.Models.Keys CreatePublicEncryptedPrivateKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/CreatePublicEncryptedPrivateKey", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/CreatePublicEncryptedPrivateKeyResponse")]
        System.Threading.Tasks.Task<DC.Common.Models.Keys> CreatePublicEncryptedPrivateKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/CreateOrder", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/CreateOrderResponse")]
        DC.Common.Models.Order CreateOrder(string publicKey, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/CreateOrder", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/CreateOrderResponse")]
        System.Threading.Tasks.Task<DC.Common.Models.Order> CreateOrderAsync(string publicKey, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/TransferCoinsToBuyer", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/TransferCoinsToBuyerResponse")]
        string TransferCoinsToBuyer(string cardId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/TransferCoinsToBuyer", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/TransferCoinsToBuyerResponse")]
        System.Threading.Tasks.Task<string> TransferCoinsToBuyerAsync(string cardId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/ReceiveCoins", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/ReceiveCoinsResponse")]
        string ReceiveCoins(string encryptedPrivateKey, string cardId, string destinationAddress, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/ReceiveCoins", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/ReceiveCoinsResponse")]
        System.Threading.Tasks.Task<string> ReceiveCoinsAsync(string encryptedPrivateKey, string cardId, string destinationAddress, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/GetBalance", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/GetBalanceResponse")]
        decimal GetBalance(string address, short confirmations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/GetBalance", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/GetBalanceResponse")]
        System.Threading.Tasks.Task<decimal> GetBalanceAsync(string address, short confirmations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/SendBitcoins", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/SendBitcoinsResponse")]
        string SendBitcoins(string encryptedPrivateKey, string password, string destinationAddress, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/SendBitcoins", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/SendBitcoinsResponse")]
        System.Threading.Tasks.Task<string> SendBitcoinsAsync(string encryptedPrivateKey, string password, string destinationAddress, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/SendEmail", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/SendEmailResponse")]
        void SendEmail(string toAddress, string subject, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schema.diamondcircle.net/v1/IAtm/SendEmail", ReplyAction="http://schema.diamondcircle.net/v1/IAtm/SendEmailResponse")]
        System.Threading.Tasks.Task SendEmailAsync(string toAddress, string subject, string body);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAtmChannel : dcweb.Tests.NodeTest.IAtm, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AtmClient : System.ServiceModel.ClientBase<dcweb.Tests.NodeTest.IAtm>, dcweb.Tests.NodeTest.IAtm {
        
        public AtmClient() {
        }
        
        public AtmClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AtmClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AtmClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AtmClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DC.Common.Models.Keys CreatePublicEncryptedPrivateKey() {
            return base.Channel.CreatePublicEncryptedPrivateKey();
        }
        
        public System.Threading.Tasks.Task<DC.Common.Models.Keys> CreatePublicEncryptedPrivateKeyAsync() {
            return base.Channel.CreatePublicEncryptedPrivateKeyAsync();
        }
        
        public DC.Common.Models.Order CreateOrder(string publicKey, decimal amount) {
            return base.Channel.CreateOrder(publicKey, amount);
        }
        
        public System.Threading.Tasks.Task<DC.Common.Models.Order> CreateOrderAsync(string publicKey, decimal amount) {
            return base.Channel.CreateOrderAsync(publicKey, amount);
        }
        
        public string TransferCoinsToBuyer(string cardId, decimal amount) {
            return base.Channel.TransferCoinsToBuyer(cardId, amount);
        }
        
        public System.Threading.Tasks.Task<string> TransferCoinsToBuyerAsync(string cardId, decimal amount) {
            return base.Channel.TransferCoinsToBuyerAsync(cardId, amount);
        }
        
        public string ReceiveCoins(string encryptedPrivateKey, string cardId, string destinationAddress, decimal amount) {
            return base.Channel.ReceiveCoins(encryptedPrivateKey, cardId, destinationAddress, amount);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveCoinsAsync(string encryptedPrivateKey, string cardId, string destinationAddress, decimal amount) {
            return base.Channel.ReceiveCoinsAsync(encryptedPrivateKey, cardId, destinationAddress, amount);
        }
        
        public decimal GetBalance(string address, short confirmations) {
            return base.Channel.GetBalance(address, confirmations);
        }
        
        public System.Threading.Tasks.Task<decimal> GetBalanceAsync(string address, short confirmations) {
            return base.Channel.GetBalanceAsync(address, confirmations);
        }
        
        public string SendBitcoins(string encryptedPrivateKey, string password, string destinationAddress, decimal amount) {
            return base.Channel.SendBitcoins(encryptedPrivateKey, password, destinationAddress, amount);
        }
        
        public System.Threading.Tasks.Task<string> SendBitcoinsAsync(string encryptedPrivateKey, string password, string destinationAddress, decimal amount) {
            return base.Channel.SendBitcoinsAsync(encryptedPrivateKey, password, destinationAddress, amount);
        }
        
        public void SendEmail(string toAddress, string subject, string body) {
            base.Channel.SendEmail(toAddress, subject, body);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(string toAddress, string subject, string body) {
            return base.Channel.SendEmailAsync(toAddress, subject, body);
        }
    }
}
