//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BitcoinATM.DCCard {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineAccount", Namespace="http://schemas.datacontract.org/2004/07/DC.Common.Models")]
    [System.SerializableAttribute()]
    public partial class OnlineAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfirmTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfirmToken {
            get {
                return this.ConfirmTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfirmTokenField, value) != true)) {
                    this.ConfirmTokenField = value;
                    this.RaisePropertyChanged("ConfirmToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://payment.diamondcircle.net/v1", ConfigurationName="DCCard.ICard")]
    public interface ICard {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        void AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        System.Threading.Tasks.Task AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        void AddCard(string CardId, string PublicKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        System.Threading.Tasks.Task AddCardAsync(string CardId, string PublicKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/IsCardOnFile", ReplyAction="https://payment.diamondcircle.net/v1/ICard/IsCardOnFileResponse")]
        bool IsCardOnFile(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/IsCardOnFile", ReplyAction="https://payment.diamondcircle.net/v1/ICard/IsCardOnFileResponse")]
        System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        string GetHotWalletAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        System.Threading.Tasks.Task<string> GetHotWalletAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccount", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccountResponse")]
        BitcoinATM.DCCard.OnlineAccount AddOnlineAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccount", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccountResponse")]
        System.Threading.Tasks.Task<BitcoinATM.DCCard.OnlineAccount> AddOnlineAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/WriteTransaction", ReplyAction="https://payment.diamondcircle.net/v1/ICard/WriteTransactionResponse")]
        decimal WriteTransaction(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/WriteTransaction", ReplyAction="https://payment.diamondcircle.net/v1/ICard/WriteTransactionResponse")]
        System.Threading.Tasks.Task<decimal> WriteTransactionAsync(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/CreateaPayment", ReplyAction="https://payment.diamondcircle.net/v1/ICard/CreateaPaymentResponse")]
        bool CreateaPayment(string PaymentProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/CreateaPayment", ReplyAction="https://payment.diamondcircle.net/v1/ICard/CreateaPaymentResponse")]
        System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardChannel : BitcoinATM.DCCard.ICard, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardClient : System.ServiceModel.ClientBase<BitcoinATM.DCCard.ICard>, BitcoinATM.DCCard.ICard {
        
        public CardClient() {
        }
        
        public CardClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN) {
            base.Channel.AddCardWithPIN(CardId, PublicKey, Password, PIN);
        }
        
        public System.Threading.Tasks.Task AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN) {
            return base.Channel.AddCardWithPINAsync(CardId, PublicKey, Password, PIN);
        }
        
        public void AddCard(string CardId, string PublicKey, string Password) {
            base.Channel.AddCard(CardId, PublicKey, Password);
        }
        
        public System.Threading.Tasks.Task AddCardAsync(string CardId, string PublicKey, string Password) {
            return base.Channel.AddCardAsync(CardId, PublicKey, Password);
        }
        
        public bool IsCardOnFile(string CardId) {
            return base.Channel.IsCardOnFile(CardId);
        }
        
        public System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string CardId) {
            return base.Channel.IsCardOnFileAsync(CardId);
        }
        
        public string GetHotWalletAddress() {
            return base.Channel.GetHotWalletAddress();
        }
        
        public System.Threading.Tasks.Task<string> GetHotWalletAddressAsync() {
            return base.Channel.GetHotWalletAddressAsync();
        }
        
        public BitcoinATM.DCCard.OnlineAccount AddOnlineAccount() {
            return base.Channel.AddOnlineAccount();
        }
        
        public System.Threading.Tasks.Task<BitcoinATM.DCCard.OnlineAccount> AddOnlineAccountAsync() {
            return base.Channel.AddOnlineAccountAsync();
        }
        
        public decimal WriteTransaction(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID) {
            return base.Channel.WriteTransaction(CardId, TransType, TerminalId, NumuratorCurrency, DenominatorCurrency, Amount, Price, Reference, TransactionID);
        }
        
        public System.Threading.Tasks.Task<decimal> WriteTransactionAsync(string CardId, string TransType, string TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID) {
            return base.Channel.WriteTransactionAsync(CardId, TransType, TerminalId, NumuratorCurrency, DenominatorCurrency, Amount, Price, Reference, TransactionID);
        }
        
        public bool CreateaPayment(string PaymentProvider) {
            return base.Channel.CreateaPayment(PaymentProvider);
        }
        
        public System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider) {
            return base.Channel.CreateaPaymentAsync(PaymentProvider);
        }
    }
}
