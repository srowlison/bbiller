//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BitcoinATM.DCDiagnostics {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TerminalSettings", Namespace="http://schemas.datacontract.org/2004/07/DC.Common.Models")]
    [System.SerializableAttribute()]
    public partial class TerminalSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultCryptoCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultFiatCurrencyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultCryptoCurrency {
            get {
                return this.DefaultCryptoCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultCryptoCurrencyField, value) != true)) {
                    this.DefaultCryptoCurrencyField = value;
                    this.RaisePropertyChanged("DefaultCryptoCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultFiatCurrency {
            get {
                return this.DefaultFiatCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultFiatCurrencyField, value) != true)) {
                    this.DefaultFiatCurrencyField = value;
                    this.RaisePropertyChanged("DefaultFiatCurrency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://payment.diamondcircle.net/v1", ConfigurationName="DCDiagnostics.IDiagnostic")]
    public interface IDiagnostic {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/HeartBeat", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/HeartBeatResponse")]
        string HeartBeat(int TerminalId, string IPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/HeartBeat", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/HeartBeatResponse")]
        System.Threading.Tasks.Task<string> HeartBeatAsync(int TerminalId, string IPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/ServiceError", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/ServiceErrorResponse")]
        bool ServiceError(int TerminalId, string Category, System.Diagnostics.TraceEventType Severity, string ErrorCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/ServiceError", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/ServiceErrorResponse")]
        System.Threading.Tasks.Task<bool> ServiceErrorAsync(int TerminalId, string Category, System.Diagnostics.TraceEventType Severity, string ErrorCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/GetSettings", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/GetSettingsResponse")]
        BitcoinATM.DCDiagnostics.TerminalSettings GetSettings(int TerminalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/IDiagnostic/GetSettings", ReplyAction="https://payment.diamondcircle.net/v1/IDiagnostic/GetSettingsResponse")]
        System.Threading.Tasks.Task<BitcoinATM.DCDiagnostics.TerminalSettings> GetSettingsAsync(int TerminalId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiagnosticChannel : BitcoinATM.DCDiagnostics.IDiagnostic, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiagnosticClient : System.ServiceModel.ClientBase<BitcoinATM.DCDiagnostics.IDiagnostic>, BitcoinATM.DCDiagnostics.IDiagnostic {
        
        public DiagnosticClient() {
        }
        
        public DiagnosticClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiagnosticClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosticClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosticClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HeartBeat(int TerminalId, string IPAddress) {
            return base.Channel.HeartBeat(TerminalId, IPAddress);
        }
        
        public System.Threading.Tasks.Task<string> HeartBeatAsync(int TerminalId, string IPAddress) {
            return base.Channel.HeartBeatAsync(TerminalId, IPAddress);
        }
        
        public bool ServiceError(int TerminalId, string Category, System.Diagnostics.TraceEventType Severity, string ErrorCondition) {
            return base.Channel.ServiceError(TerminalId, Category, Severity, ErrorCondition);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceErrorAsync(int TerminalId, string Category, System.Diagnostics.TraceEventType Severity, string ErrorCondition) {
            return base.Channel.ServiceErrorAsync(TerminalId, Category, Severity, ErrorCondition);
        }
        
        public BitcoinATM.DCDiagnostics.TerminalSettings GetSettings(int TerminalId) {
            return base.Channel.GetSettings(TerminalId);
        }
        
        public System.Threading.Tasks.Task<BitcoinATM.DCDiagnostics.TerminalSettings> GetSettingsAsync(int TerminalId) {
            return base.Channel.GetSettingsAsync(TerminalId);
        }
    }
}
