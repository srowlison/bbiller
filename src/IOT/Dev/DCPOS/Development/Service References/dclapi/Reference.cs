//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCPOS.dclapi {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Keys", Namespace="http://schemas.datacontract.org/2004/07/DC.Common.Models")]
    [System.SerializableAttribute()]
    public partial class Keys : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] EncryptedWIFPrivateKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] EncryptedWIFPrivateKey {
            get {
                return this.EncryptedWIFPrivateKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptedWIFPrivateKeyField, value) != true)) {
                    this.EncryptedWIFPrivateKeyField = value;
                    this.RaisePropertyChanged("EncryptedWIFPrivateKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateKey {
            get {
                return this.PrivateKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateKeyField, value) != true)) {
                    this.PrivateKeyField = value;
                    this.RaisePropertyChanged("PrivateKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicKey {
            get {
                return this.PublicKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicKeyField, value) != true)) {
                    this.PublicKeyField = value;
                    this.RaisePropertyChanged("PublicKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="dclapi.IDCLAPI")]
    public interface IDCLAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/SendBitcoins", ReplyAction="http://tempuri.org/IDCLAPI/SendBitcoinsResponse")]
        string SendBitcoins(string APIKEY, string FromCardId, string FromCardPublicAddress, string encryptedPrivateKey, string DestinationCardId, decimal BitcoinAmount, decimal FiatAmount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/SendBitcoins", ReplyAction="http://tempuri.org/IDCLAPI/SendBitcoinsResponse")]
        System.Threading.Tasks.Task<string> SendBitcoinsAsync(string APIKEY, string FromCardId, string FromCardPublicAddress, string encryptedPrivateKey, string DestinationCardId, decimal BitcoinAmount, decimal FiatAmount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/PurchaseBitcoins", ReplyAction="http://tempuri.org/IDCLAPI/PurchaseBitcoinsResponse")]
        string PurchaseBitcoins(string APIKEY, string CardId, string FromCardPublicAddress, decimal FiatAmount, decimal BitcoinAmount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/PurchaseBitcoins", ReplyAction="http://tempuri.org/IDCLAPI/PurchaseBitcoinsResponse")]
        System.Threading.Tasks.Task<string> PurchaseBitcoinsAsync(string APIKEY, string CardId, string FromCardPublicAddress, decimal FiatAmount, decimal BitcoinAmount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/GetSpotPrice", ReplyAction="http://tempuri.org/IDCLAPI/GetSpotPriceResponse")]
        decimal GetSpotPrice(string APIKEY, string Currency, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/GetSpotPrice", ReplyAction="http://tempuri.org/IDCLAPI/GetSpotPriceResponse")]
        System.Threading.Tasks.Task<decimal> GetSpotPriceAsync(string APIKEY, string Currency, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/ChkPINLimit", ReplyAction="http://tempuri.org/IDCLAPI/ChkPINLimitResponse")]
        string ChkPINLimit(string APIKEY, string CardId, decimal Fiatamount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/ChkPINLimit", ReplyAction="http://tempuri.org/IDCLAPI/ChkPINLimitResponse")]
        System.Threading.Tasks.Task<string> ChkPINLimitAsync(string APIKEY, string CardId, decimal Fiatamount, string Currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/checkPin", ReplyAction="http://tempuri.org/IDCLAPI/checkPinResponse")]
        string checkPin(string APIKEY, string CardId, string Pin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/checkPin", ReplyAction="http://tempuri.org/IDCLAPI/checkPinResponse")]
        System.Threading.Tasks.Task<string> checkPinAsync(string APIKEY, string CardId, string Pin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/GetBalance", ReplyAction="http://tempuri.org/IDCLAPI/GetBalanceResponse")]
        decimal GetBalance(string APIKEY, string PublicKey, int Confirmations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/GetBalance", ReplyAction="http://tempuri.org/IDCLAPI/GetBalanceResponse")]
        System.Threading.Tasks.Task<decimal> GetBalanceAsync(string APIKEY, string PublicKey, int Confirmations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/CreatePublicEncryptedPrivateKey", ReplyAction="http://tempuri.org/IDCLAPI/CreatePublicEncryptedPrivateKeyResponse")]
        DCPOS.dclapi.Keys CreatePublicEncryptedPrivateKey(string APIKEY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/CreatePublicEncryptedPrivateKey", ReplyAction="http://tempuri.org/IDCLAPI/CreatePublicEncryptedPrivateKeyResponse")]
        System.Threading.Tasks.Task<DCPOS.dclapi.Keys> CreatePublicEncryptedPrivateKeyAsync(string APIKEY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/AddCardWithPinLimit", ReplyAction="http://tempuri.org/IDCLAPI/AddCardWithPinLimitResponse")]
        string AddCardWithPinLimit(
                    string APIKEY, 
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2, 
                    string PIN, 
                    string CurrencyCode, 
                    decimal Limit, 
                    bool Topup, 
                    decimal TopUpAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/AddCardWithPinLimit", ReplyAction="http://tempuri.org/IDCLAPI/AddCardWithPinLimitResponse")]
        System.Threading.Tasks.Task<string> AddCardWithPinLimitAsync(
                    string APIKEY, 
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2, 
                    string PIN, 
                    string CurrencyCode, 
                    decimal Limit, 
                    bool Topup, 
                    decimal TopUpAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/IsCardOnFile", ReplyAction="http://tempuri.org/IDCLAPI/IsCardOnFileResponse")]
        bool IsCardOnFile(string APIKEY, string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/IsCardOnFile", ReplyAction="http://tempuri.org/IDCLAPI/IsCardOnFileResponse")]
        System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string APIKEY, string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/SendEmail", ReplyAction="http://tempuri.org/IDCLAPI/SendEmailResponse")]
        string SendEmail(string APIKEY, string Email, string Subject, string Body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDCLAPI/SendEmail", ReplyAction="http://tempuri.org/IDCLAPI/SendEmailResponse")]
        System.Threading.Tasks.Task<string> SendEmailAsync(string APIKEY, string Email, string Subject, string Body);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDCLAPIChannel : DCPOS.dclapi.IDCLAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DCLAPIClient : System.ServiceModel.ClientBase<DCPOS.dclapi.IDCLAPI>, DCPOS.dclapi.IDCLAPI {
        
        public DCLAPIClient() {
        }
        
        public DCLAPIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DCLAPIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DCLAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DCLAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SendBitcoins(string APIKEY, string FromCardId, string FromCardPublicAddress, string encryptedPrivateKey, string DestinationCardId, decimal BitcoinAmount, decimal FiatAmount, string Currency) {
            return base.Channel.SendBitcoins(APIKEY, FromCardId, FromCardPublicAddress, encryptedPrivateKey, DestinationCardId, BitcoinAmount, FiatAmount, Currency);
        }
        
        public System.Threading.Tasks.Task<string> SendBitcoinsAsync(string APIKEY, string FromCardId, string FromCardPublicAddress, string encryptedPrivateKey, string DestinationCardId, decimal BitcoinAmount, decimal FiatAmount, string Currency) {
            return base.Channel.SendBitcoinsAsync(APIKEY, FromCardId, FromCardPublicAddress, encryptedPrivateKey, DestinationCardId, BitcoinAmount, FiatAmount, Currency);
        }
        
        public string PurchaseBitcoins(string APIKEY, string CardId, string FromCardPublicAddress, decimal FiatAmount, decimal BitcoinAmount, string Currency) {
            return base.Channel.PurchaseBitcoins(APIKEY, CardId, FromCardPublicAddress, FiatAmount, BitcoinAmount, Currency);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseBitcoinsAsync(string APIKEY, string CardId, string FromCardPublicAddress, decimal FiatAmount, decimal BitcoinAmount, string Currency) {
            return base.Channel.PurchaseBitcoinsAsync(APIKEY, CardId, FromCardPublicAddress, FiatAmount, BitcoinAmount, Currency);
        }
        
        public decimal GetSpotPrice(string APIKEY, string Currency, decimal amount) {
            return base.Channel.GetSpotPrice(APIKEY, Currency, amount);
        }
        
        public System.Threading.Tasks.Task<decimal> GetSpotPriceAsync(string APIKEY, string Currency, decimal amount) {
            return base.Channel.GetSpotPriceAsync(APIKEY, Currency, amount);
        }
        
        public string ChkPINLimit(string APIKEY, string CardId, decimal Fiatamount, string Currency) {
            return base.Channel.ChkPINLimit(APIKEY, CardId, Fiatamount, Currency);
        }
        
        public System.Threading.Tasks.Task<string> ChkPINLimitAsync(string APIKEY, string CardId, decimal Fiatamount, string Currency) {
            return base.Channel.ChkPINLimitAsync(APIKEY, CardId, Fiatamount, Currency);
        }
        
        public string checkPin(string APIKEY, string CardId, string Pin) {
            return base.Channel.checkPin(APIKEY, CardId, Pin);
        }
        
        public System.Threading.Tasks.Task<string> checkPinAsync(string APIKEY, string CardId, string Pin) {
            return base.Channel.checkPinAsync(APIKEY, CardId, Pin);
        }
        
        public decimal GetBalance(string APIKEY, string PublicKey, int Confirmations) {
            return base.Channel.GetBalance(APIKEY, PublicKey, Confirmations);
        }
        
        public System.Threading.Tasks.Task<decimal> GetBalanceAsync(string APIKEY, string PublicKey, int Confirmations) {
            return base.Channel.GetBalanceAsync(APIKEY, PublicKey, Confirmations);
        }
        
        public DCPOS.dclapi.Keys CreatePublicEncryptedPrivateKey(string APIKEY) {
            return base.Channel.CreatePublicEncryptedPrivateKey(APIKEY);
        }
        
        public System.Threading.Tasks.Task<DCPOS.dclapi.Keys> CreatePublicEncryptedPrivateKeyAsync(string APIKEY) {
            return base.Channel.CreatePublicEncryptedPrivateKeyAsync(APIKEY);
        }
        
        public string AddCardWithPinLimit(
                    string APIKEY, 
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2, 
                    string PIN, 
                    string CurrencyCode, 
                    decimal Limit, 
                    bool Topup, 
                    decimal TopUpAmount) {
            return base.Channel.AddCardWithPinLimit(APIKEY, CardId, PublicKey, Password, FirstName, LastName, Address, City, Zip, State, Country, Telephone, DOB, EmailAddress, CardHolderName, CardNumber, ExpiryMonth, ExpiryYear, CVC2, PIN, CurrencyCode, Limit, Topup, TopUpAmount);
        }
        
        public System.Threading.Tasks.Task<string> AddCardWithPinLimitAsync(
                    string APIKEY, 
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2, 
                    string PIN, 
                    string CurrencyCode, 
                    decimal Limit, 
                    bool Topup, 
                    decimal TopUpAmount) {
            return base.Channel.AddCardWithPinLimitAsync(APIKEY, CardId, PublicKey, Password, FirstName, LastName, Address, City, Zip, State, Country, Telephone, DOB, EmailAddress, CardHolderName, CardNumber, ExpiryMonth, ExpiryYear, CVC2, PIN, CurrencyCode, Limit, Topup, TopUpAmount);
        }
        
        public bool IsCardOnFile(string APIKEY, string CardId) {
            return base.Channel.IsCardOnFile(APIKEY, CardId);
        }
        
        public System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string APIKEY, string CardId) {
            return base.Channel.IsCardOnFileAsync(APIKEY, CardId);
        }
        
        public string SendEmail(string APIKEY, string Email, string Subject, string Body) {
            return base.Channel.SendEmail(APIKEY, Email, Subject, Body);
        }
        
        public System.Threading.Tasks.Task<string> SendEmailAsync(string APIKEY, string Email, string Subject, string Body) {
            return base.Channel.SendEmailAsync(APIKEY, Email, Subject, Body);
        }
    }
}
