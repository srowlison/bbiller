// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PortalUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Navigate to login and enter data
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIHomeDiamondCircleIntWindow.UIHomeDiamondCircleDocument.UILoginHyperlink;
            HtmlEdit uIUsernameEdit = this.UIHomeDiamondCircleIntWindow.UILoginDiamondCircleDocument.UIUsernameEdit;
            HtmlEdit uIPasswordEdit = this.UIHomeDiamondCircleIntWindow.UILoginDiamondCircleDocument.UIPasswordEdit;
            HtmlInputButton uILoginButton = this.UIHomeDiamondCircleIntWindow.UILoginDiamondCircleDocument.UILoginFormCustom.UILoginButton;
            #endregion

            // Click 'Login' link
            Mouse.Click(uILoginHyperlink, new Point(312, 86));

            // Type 'lucascullen' in 'User name' text box
            uIUsernameEdit.Text = this.LoginParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.LoginParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LoginParams.UIPasswordEditPassword;

            // Click 'Login' button
            Mouse.Click(uILoginButton, new Point(228, 61));
        }
        
        /// <summary>
        /// AssertLoginFaliureMessage - Use 'AssertLoginFaliureMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertLoginFaliureMessage()
        {
            #region Variable Declarations
            HtmlCustom uITheusernameorpassworCustom = this.UIHomeDiamondCircleIntWindow.UILoginDiamondCircleDocument.UILoginFormCustom.UITheusernameorpassworCustom;
            #endregion

            // Verify that the 'InnerText' property of 'The user name or password provided is in' custom control equals 'The user name or password provided is incorrect.'
            Assert.AreEqual(this.AssertLoginFaliureMessageExpectedValues.UITheusernameorpassworCustomInnerText, uITheusernameorpassworCustom.InnerText, "Warning message did not appear.");
        }
        
        /// <summary>
        /// OpenIEDiamondCircle - Use 'OpenIEDiamondCircleParams' to pass parameters into this method.
        /// </summary>
        public void OpenIEDiamondCircle()
        {

            // Go to web page 'https://portal.diamondcircle.net/' using new browser instance
            this.UIInternetExplorerEnhaWindow.LaunchUrl(new System.Uri(this.OpenIEDiamondCircleParams.UIInternetExplorerEnhaWindowUrl));
        }
        
        /// <summary>
        /// AssertUsername - Use 'AssertUsernameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertUsername()
        {
            #region Variable Declarations
            HtmlHyperlink uILucascullenHyperlink = this.UIHomeDiamondCircleIntWindow.UIHomeDiamondCircleDocument.UILucascullenHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'lucascullen' link equals 'lucascullen'
            Assert.AreEqual(this.AssertUsernameExpectedValues.UILucascullenHyperlinkInnerText, uILucascullenHyperlink.InnerText, "Username incorrect");
        }
        
        #region Properties
        public virtual LoginParams LoginParams
        {
            get
            {
                if ((this.mLoginParams == null))
                {
                    this.mLoginParams = new LoginParams();
                }
                return this.mLoginParams;
            }
        }
        
        public virtual AssertLoginFaliureMessageExpectedValues AssertLoginFaliureMessageExpectedValues
        {
            get
            {
                if ((this.mAssertLoginFaliureMessageExpectedValues == null))
                {
                    this.mAssertLoginFaliureMessageExpectedValues = new AssertLoginFaliureMessageExpectedValues();
                }
                return this.mAssertLoginFaliureMessageExpectedValues;
            }
        }
        
        public virtual OpenIEDiamondCircleParams OpenIEDiamondCircleParams
        {
            get
            {
                if ((this.mOpenIEDiamondCircleParams == null))
                {
                    this.mOpenIEDiamondCircleParams = new OpenIEDiamondCircleParams();
                }
                return this.mOpenIEDiamondCircleParams;
            }
        }
        
        public virtual AssertUsernameExpectedValues AssertUsernameExpectedValues
        {
            get
            {
                if ((this.mAssertUsernameExpectedValues == null))
                {
                    this.mAssertUsernameExpectedValues = new AssertUsernameExpectedValues();
                }
                return this.mAssertUsernameExpectedValues;
            }
        }
        
        public UIHomeDiamondCircleIntWindow UIHomeDiamondCircleIntWindow
        {
            get
            {
                if ((this.mUIHomeDiamondCircleIntWindow == null))
                {
                    this.mUIHomeDiamondCircleIntWindow = new UIHomeDiamondCircleIntWindow();
                }
                return this.mUIHomeDiamondCircleIntWindow;
            }
        }
        
        public UIInternetExplorerEnhaWindow UIInternetExplorerEnhaWindow
        {
            get
            {
                if ((this.mUIInternetExplorerEnhaWindow == null))
                {
                    this.mUIInternetExplorerEnhaWindow = new UIInternetExplorerEnhaWindow();
                }
                return this.mUIInternetExplorerEnhaWindow;
            }
        }
        #endregion
        
        #region Fields
        private LoginParams mLoginParams;
        
        private AssertLoginFaliureMessageExpectedValues mAssertLoginFaliureMessageExpectedValues;
        
        private OpenIEDiamondCircleParams mOpenIEDiamondCircleParams;
        
        private AssertUsernameExpectedValues mAssertUsernameExpectedValues;
        
        private UIHomeDiamondCircleIntWindow mUIHomeDiamondCircleIntWindow;
        
        private UIInternetExplorerEnhaWindow mUIInternetExplorerEnhaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'lucascullen' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "lucascullen";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "xam/vtIMPD+AJOCiBEV9QgqKRFXblZth";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLoginFaliureMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertLoginFaliureMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'The user name or password provided is in' custom control equals 'The user name or password provided is incorrect.'
        /// </summary>
        public string UITheusernameorpassworCustomInnerText = "The user name or password provided is incorrect.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenIEDiamondCircle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenIEDiamondCircleParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://portal.diamondcircle.net/' using new browser instance
        /// </summary>
        public string UIInternetExplorerEnhaWindowUrl = "https://portal.diamondcircle.net/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUsername'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertUsernameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'lucascullen' link equals 'lucascullen'
        /// </summary>
        public string UILucascullenHyperlinkInnerText = "lucascullen";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHomeDiamondCircleIntWindow : BrowserWindow
    {
        
        public UIHomeDiamondCircleIntWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Home - Diamond Circle";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Home - Diamond Circle");
            this.WindowTitles.Add("Log in - Diamond Circle");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHomeDiamondCircleDocument UIHomeDiamondCircleDocument
        {
            get
            {
                if ((this.mUIHomeDiamondCircleDocument == null))
                {
                    this.mUIHomeDiamondCircleDocument = new UIHomeDiamondCircleDocument(this);
                }
                return this.mUIHomeDiamondCircleDocument;
            }
        }
        
        public UILoginDiamondCircleDocument UILoginDiamondCircleDocument
        {
            get
            {
                if ((this.mUILoginDiamondCircleDocument == null))
                {
                    this.mUILoginDiamondCircleDocument = new UILoginDiamondCircleDocument(this);
                }
                return this.mUILoginDiamondCircleDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHomeDiamondCircleDocument mUIHomeDiamondCircleDocument;
        
        private UILoginDiamondCircleDocument mUILoginDiamondCircleDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHomeDiamondCircleDocument : HtmlDocument
    {
        
        public UIHomeDiamondCircleDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Home - Diamond Circle";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://portal.diamondcircle.net/";
            this.WindowTitles.Add("Home - Diamond Circle");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "loginLink";
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://portal.diamondcircle.net/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "loginbutton";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"loginbutton\" id=\"loginLink\" href=";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILoginHyperlink.WindowTitles.Add("Home - Diamond Circle");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public HtmlHyperlink UILucascullenHyperlink
        {
            get
            {
                if ((this.mUILucascullenHyperlink == null))
                {
                    this.mUILucascullenHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILucascullenHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILucascullenHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILucascullenHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILucascullenHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "lucascullen";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Manage";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://portal.diamondcircle.net/Account/Manage";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "manageaccountbutton";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" class=\"manageaccountbutto";
                    this.mUILucascullenHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILucascullenHyperlink.WindowTitles.Add("Home - Diamond Circle");
                    #endregion
                }
                return this.mUILucascullenHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILoginHyperlink;
        
        private HtmlHyperlink mUILucascullenHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILoginDiamondCircleDocument : HtmlDocument
    {
        
        public UILoginDiamondCircleDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - Diamond Circle";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://portal.diamondcircle.net/Account/Login";
            this.WindowTitles.Add("Log in - Diamond Circle");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "UserName";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "UserName";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "User name";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "textbox";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"UserName\" class=\"textbox\" id=\"User";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIUsernameEdit.WindowTitles.Add("Log in - Diamond Circle");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "textbox";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"textbox\" id=\"Pass";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - Diamond Circle");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public UILoginFormCustom UILoginFormCustom
        {
            get
            {
                if ((this.mUILoginFormCustom == null))
                {
                    this.mUILoginFormCustom = new UILoginFormCustom(this);
                }
                return this.mUILoginFormCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private UILoginFormCustom mUILoginFormCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UILoginFormCustom : HtmlCustom
    {
        
        public UILoginFormCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "SECTION";
            this.SearchProperties["Id"] = "loginForm";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"loginForm\"";
            this.FilterProperties["TagInstance"] = "2";
            this.WindowTitles.Add("Log in - Diamond Circle");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Login";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "loginbutton";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"loginbutton\" type=\"submit\" value=";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUILoginButton.WindowTitles.Add("Log in - Diamond Circle");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public HtmlCustom UITheusernameorpassworCustom
        {
            get
            {
                if ((this.mUITheusernameorpassworCustom == null))
                {
                    this.mUITheusernameorpassworCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUITheusernameorpassworCustom.SearchProperties["TagName"] = "LI";
                    this.mUITheusernameorpassworCustom.SearchProperties["Id"] = null;
                    this.mUITheusernameorpassworCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUITheusernameorpassworCustom.FilterProperties["Class"] = null;
                    this.mUITheusernameorpassworCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUITheusernameorpassworCustom.FilterProperties["InnerText"] = "The user name or password provided is in";
                    this.mUITheusernameorpassworCustom.FilterProperties["TagInstance"] = "1";
                    this.mUITheusernameorpassworCustom.WindowTitles.Add("Log in - Diamond Circle");
                    #endregion
                }
                return this.mUITheusernameorpassworCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUILoginButton;
        
        private HtmlCustom mUITheusernameorpassworCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIInternetExplorerEnhaWindow : BrowserWindow
    {
        
        public UIInternetExplorerEnhaWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Internet Explorer Enhanced Security Configuration is not enabled";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Internet Explorer Enhanced Security Configuration is not enabled");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
}
