//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCAPI.Card {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CCInfo", Namespace="http://schemas.datacontract.org/2004/07/DC.Common.Models")]
    [System.SerializableAttribute()]
    public partial class CCInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CVC2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardHolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpiryMonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpiryYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelephoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CVC2 {
            get {
                return this.CVC2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CVC2Field, value) != true)) {
                    this.CVC2Field = value;
                    this.RaisePropertyChanged("CVC2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardHolderName {
            get {
                return this.CardHolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CardHolderNameField, value) != true)) {
                    this.CardHolderNameField = value;
                    this.RaisePropertyChanged("CardHolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardNumber {
            get {
                return this.CardNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CardNumberField, value) != true)) {
                    this.CardNumberField = value;
                    this.RaisePropertyChanged("CardNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DOB {
            get {
                return this.DOBField;
            }
            set {
                if ((object.ReferenceEquals(this.DOBField, value) != true)) {
                    this.DOBField = value;
                    this.RaisePropertyChanged("DOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpiryMonth {
            get {
                return this.ExpiryMonthField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpiryMonthField, value) != true)) {
                    this.ExpiryMonthField = value;
                    this.RaisePropertyChanged("ExpiryMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpiryYear {
            get {
                return this.ExpiryYearField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpiryYearField, value) != true)) {
                    this.ExpiryYearField = value;
                    this.RaisePropertyChanged("ExpiryYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Telephone {
            get {
                return this.TelephoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TelephoneField, value) != true)) {
                    this.TelephoneField = value;
                    this.RaisePropertyChanged("Telephone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnlineAccount", Namespace="http://schemas.datacontract.org/2004/07/DC.Common.Models")]
    [System.SerializableAttribute()]
    public partial class OnlineAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfirmTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfirmToken {
            get {
                return this.ConfirmTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfirmTokenField, value) != true)) {
                    this.ConfirmTokenField = value;
                    this.RaisePropertyChanged("ConfirmToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://payment.diamondcircle.net/v1", ConfigurationName="Card.ICard")]
    public interface ICard {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        void AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCardWithPIN", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardWithPINResponse")]
        System.Threading.Tasks.Task AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        void AddCard(
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddCard", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddCardResponse")]
        System.Threading.Tasks.Task AddCardAsync(
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetCustomerCC", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetCustomerCCResponse")]
        DCAPI.Card.CCInfo GetCustomerCC(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetCustomerCC", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetCustomerCCResponse")]
        System.Threading.Tasks.Task<DCAPI.Card.CCInfo> GetCustomerCCAsync(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/IsCardOnFile", ReplyAction="https://payment.diamondcircle.net/v1/ICard/IsCardOnFileResponse")]
        bool IsCardOnFile(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/IsCardOnFile", ReplyAction="https://payment.diamondcircle.net/v1/ICard/IsCardOnFileResponse")]
        System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string CardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        string GetHotWalletAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddress", ReplyAction="https://payment.diamondcircle.net/v1/ICard/GetHotWalletAddressResponse")]
        System.Threading.Tasks.Task<string> GetHotWalletAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccount", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccountResponse")]
        DCAPI.Card.OnlineAccount AddOnlineAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccount", ReplyAction="https://payment.diamondcircle.net/v1/ICard/AddOnlineAccountResponse")]
        System.Threading.Tasks.Task<DCAPI.Card.OnlineAccount> AddOnlineAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/WriteTransaction", ReplyAction="https://payment.diamondcircle.net/v1/ICard/WriteTransactionResponse")]
        decimal WriteTransaction(string CardId, string TransType, int TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/WriteTransaction", ReplyAction="https://payment.diamondcircle.net/v1/ICard/WriteTransactionResponse")]
        System.Threading.Tasks.Task<decimal> WriteTransactionAsync(string CardId, string TransType, int TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/CreateaPayment", ReplyAction="https://payment.diamondcircle.net/v1/ICard/CreateaPaymentResponse")]
        bool CreateaPayment(string PaymentProvider);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://payment.diamondcircle.net/v1/ICard/CreateaPayment", ReplyAction="https://payment.diamondcircle.net/v1/ICard/CreateaPaymentResponse")]
        System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardChannel : DCAPI.Card.ICard, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardClient : System.ServiceModel.ClientBase<DCAPI.Card.ICard>, DCAPI.Card.ICard {
        
        public CardClient() {
        }
        
        public CardClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddCardWithPIN(string CardId, string PublicKey, string Password, string PIN) {
            base.Channel.AddCardWithPIN(CardId, PublicKey, Password, PIN);
        }
        
        public System.Threading.Tasks.Task AddCardWithPINAsync(string CardId, string PublicKey, string Password, string PIN) {
            return base.Channel.AddCardWithPINAsync(CardId, PublicKey, Password, PIN);
        }
        
        public void AddCard(
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2) {
            base.Channel.AddCard(CardId, PublicKey, Password, FirstName, LastName, Address, City, Zip, State, Country, Telephone, DOB, EmailAddress, CardHolderName, CardNumber, ExpiryMonth, ExpiryYear, CVC2);
        }
        
        public System.Threading.Tasks.Task AddCardAsync(
                    string CardId, 
                    string PublicKey, 
                    string Password, 
                    string FirstName, 
                    string LastName, 
                    string Address, 
                    string City, 
                    string Zip, 
                    string State, 
                    string Country, 
                    string Telephone, 
                    string DOB, 
                    string EmailAddress, 
                    string CardHolderName, 
                    string CardNumber, 
                    string ExpiryMonth, 
                    string ExpiryYear, 
                    string CVC2) {
            return base.Channel.AddCardAsync(CardId, PublicKey, Password, FirstName, LastName, Address, City, Zip, State, Country, Telephone, DOB, EmailAddress, CardHolderName, CardNumber, ExpiryMonth, ExpiryYear, CVC2);
        }
        
        public DCAPI.Card.CCInfo GetCustomerCC(string CardId) {
            return base.Channel.GetCustomerCC(CardId);
        }
        
        public System.Threading.Tasks.Task<DCAPI.Card.CCInfo> GetCustomerCCAsync(string CardId) {
            return base.Channel.GetCustomerCCAsync(CardId);
        }
        
        public bool IsCardOnFile(string CardId) {
            return base.Channel.IsCardOnFile(CardId);
        }
        
        public System.Threading.Tasks.Task<bool> IsCardOnFileAsync(string CardId) {
            return base.Channel.IsCardOnFileAsync(CardId);
        }
        
        public string GetHotWalletAddress() {
            return base.Channel.GetHotWalletAddress();
        }
        
        public System.Threading.Tasks.Task<string> GetHotWalletAddressAsync() {
            return base.Channel.GetHotWalletAddressAsync();
        }
        
        public DCAPI.Card.OnlineAccount AddOnlineAccount() {
            return base.Channel.AddOnlineAccount();
        }
        
        public System.Threading.Tasks.Task<DCAPI.Card.OnlineAccount> AddOnlineAccountAsync() {
            return base.Channel.AddOnlineAccountAsync();
        }
        
        public decimal WriteTransaction(string CardId, string TransType, int TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID) {
            return base.Channel.WriteTransaction(CardId, TransType, TerminalId, NumuratorCurrency, DenominatorCurrency, Amount, Price, Reference, TransactionID);
        }
        
        public System.Threading.Tasks.Task<decimal> WriteTransactionAsync(string CardId, string TransType, int TerminalId, string NumuratorCurrency, string DenominatorCurrency, decimal Amount, decimal Price, string Reference, int TransactionID) {
            return base.Channel.WriteTransactionAsync(CardId, TransType, TerminalId, NumuratorCurrency, DenominatorCurrency, Amount, Price, Reference, TransactionID);
        }
        
        public bool CreateaPayment(string PaymentProvider) {
            return base.Channel.CreateaPayment(PaymentProvider);
        }
        
        public System.Threading.Tasks.Task<bool> CreateaPaymentAsync(string PaymentProvider) {
            return base.Channel.CreateaPaymentAsync(PaymentProvider);
        }
    }
}
